/**
 * *****************************************************************************
 * Copyright (c) 2014 Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr>.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Contributors:
 *     Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr> - initial API and implementation
 * ****************************************************************************
 */
package fr.dubuissonduplessis.dogma.description.compositeDescription
import fr.dubuissonduplessis.dogma.event.Event
import fr.dubuissonduplessis.dogma.instantiable.InstantiationSet
import fr.dubuissonduplessis.dogma.instantiable.impl.InstantiableDuoProxy
import fr.dubuissonduplessis.dogma.operation.Operation
import fr.dubuissonduplessis.dogma.instantiable.InstantiationVariable
import fr.dubuissonduplessis.dogma.description.EventsDescription
import fr.dubuissonduplessis.dogma.description.EventDescription
import fr.dubuissonduplessis.dogma.description.Description

/**
 * Represents an alternative description.
 * Alternative descriptions take the following form : desc1|desc2|...|descn where each "desci"
 * is a description of a single event. A code example of such a description is given in the documentation
 * of package [[fr.dubuissonduplessis.dogma.description.compositeDescription]].
 *
 * ==Instantiation process==
 * The following table details some results of the instantiation and generation process of
 * the description that takes the form: '''desc1 | desc2 | ... | descn'''.
 * <table style="border-collapse: collapse; border: 1px solid black"border="2">
 * <thead>
 * <tr>
 * 	<th scope="col" style="background-color: #CCCCCC; border-width: 1px; padding: 3px; padding-top: 7px; border: 1px solid black; text-align: left">
 *  	<strong>Operation</strong>
 *  </th>
 * 	<th scope="col" style="background-color: #CCCCCC; border-width: 1px; padding: 3px; padding-top: 7px; border: 1px solid black; text-align: left">
 *  	<strong>Results</strong>
 *  </th>
 * </tr>
 * </thead>
 * <tbody>
 * <tr>
 * 	<td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: right">isInstantiableWith</td>
 *  <td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: left">
 * 		Disjonction of the results of isInstantiableWith applied to each "desci"<br/>
 *   	Equivalent to: desc1.isInstantiableWith(s) || desc2.isInstantiableWith(s) || ... || descn.isInstantiableWith(s) <br/>
 *     <strong>Note that an alternative is instantiable if it exists at least one single event description part of it that is instantiable.</strong>
 *  </td>
 * </tr>
 * <tr>
 * 	<td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: right">variables</td>
 *  <td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: left">
 *  	Addition of all the variables of each "desci"<br/>
 *   	Equivalent to: desc1.variables ++ desc2.variables ++ ... ++ descn.variables
 *  </td>
 * </tr>
 * <tr>
 * 	<td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: right">instantiateWith</td>
 *  <td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: left">
 *  	Instantiation of all single event descriptions that are instantiable with the instantiation set.</br>
 *   	By definition of isInstantiableWith, it exists at least one single event description that is instantiable.
 *  </td>
 * </tr>
 * <tr>
 * 	<td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: right">fits</td>
 *  <td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: left">
 *  	Disjonction of the results of fits applied to each "desci"<br/>
 *   	Equivalent to: desc1.fits(e) || desc2.fits(e) || ... || descn.fits(e)
 *  </td>
 * </tr>
 * <tr>
 * 	<td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: right">bindings</td>
 *  <td style="border-width: 1px; padding: 3px; border: 1px solid black; text-align: left">
 *  	Merge all instantiation set generated by each "desci"</br>
 *   	Equivalent to: desc1.bindings(e) ++ desc2.bindings(e) ++ ... ++ descn.bindings(e)
 *  </td>
 * </tr>
 * </tbody>
 * </table>
 *
 * @author Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr>
 * @constructor Creates a new alternative description.
 * @param left Left single event description
 * @param right Right single event description, or an alternative description
 */
case class Alternative(left: EventDescription, right: EventsDescription)
  extends EventsDescription {

  // Syntactic sugar
  def *|(desc: EventsDescription): Alternative =
    Alternative(left, right *| desc)

  // Generator
  def fits(e: Event): Boolean =
    isConcernedBy(e)

  def isConcernedBy(e: Event): Boolean =
    left.isConcernedBy(e) || right.isConcernedBy(e)

  def isViolatedBy(e: Event): Boolean =
    false

  def expects(e: Event): Boolean =
    left.expects(e) || right.expects(e)

  def operationToExecute(e: Event): Option[Operation] =
    None

  def expectedEvent(): List[EventDescription] =
    left.expectedEvent() ::: right.expectedEvent()

  def expectedDescription(): Option[Description] =
    (left.expectedDescription(), right.expectedDescription()) match {
      case (None, None) => None
      case (None, Some(a)) => Some(a)
      case (Some(a), None) => Some(a)
      case (Some(a1), Some(a2)) => Some(this)
    }

  // Instantiation
  def isInstantiableWith(s: InstantiationSet): Boolean =
    left.isInstantiableWith(s) || right.isInstantiableWith(s)

  protected def instantiateWithImpl(s: InstantiationSet): Alternative =
    (left.isInstantiableWith(s), right.isInstantiableWith(s)) match {
      case (true, true) =>
        Alternative(left.instantiateWith(s), right.instantiateWith(s))
      case (false, true) =>
        Alternative(left, right.instantiateWith(s))
      case (false, false) =>
        this
      case (true, false) =>
        Alternative(left.instantiateWith(s), right)
    }

  def variables: Set[InstantiationVariable] =
    left.variables ++ right.variables

  // Generator
  protected def bindingsImpl(t: Event): InstantiationSet =
    left.bindings(t) ++
      right.bindings(t)

  override def equals(other: Any): Boolean =
    other match {
      case Alternative(other_left, other_right) =>
        left == other_left &&
          right == other_right
      case _ => false
    }
  override def hashCode: Int = 31 * (left.hashCode() + 31) + right.hashCode()

  override def toString: String = left + "|" + right
}

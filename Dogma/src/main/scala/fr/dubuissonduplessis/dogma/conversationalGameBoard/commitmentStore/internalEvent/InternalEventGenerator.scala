/**
 * *****************************************************************************
 * Copyright (c) 2014 Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr>.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Contributors:
 *     Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr> - initial API and implementation
 * ****************************************************************************
 */
package fr.dubuissonduplessis.dogma.conversationalGameBoard.commitmentStore.internalEvent

import fr.dubuissonduplessis.dogma.event.InternalEvent
import fr.dubuissonduplessis.dogma.dialogue.Dialogue
import fr.dubuissonduplessis.dogma.dialogue.Interlocutor

/**
 * An abstract internal event generator.
 *
 * The paradigmatic way to use an internal event generator is
 * the following:
 * {{{
 * import fr.dubuissonduplessis.dogma.dialogue.Interlocutor
 * import fr.dubuissonduplessis.dogma.event.InternalEvent
 * new InternalEventGenerator {
 *    // To be implemented regarding the internal events you want
 *    private[conversationalGameBoard] def internalEvents(lastSpeaker: Option[Interlocutor]): Set[InternalEvent] = ???
 *    private[conversationalGameBoard] def pastEvents: Set[InternalEvent] = ???
 *    private[conversationalGameBoard] def popEvents: Unit = ???
 *
 *    // Example usage method
 *    def process(): Unit = {
 *       // 1- Determines the lastSpeaker
 *       val lastSpeaker = ???
 *
 *       // 2- Retrieves internal events
 *       val internalEventSet = internalEvents(lastSpeaker)
 *
 *       // 3- Do something with the internal events
 *       // ...
 *
 *       // 4- Pops the internal events
 *       popEvents()
 *    }
 * }
 * }}}
 * @see Implementations of an internal event generator include
 * [[fr.dubuissonduplessis.dogma.conversationalGameBoard.commitmentStore.internalEvent.impl.DialogueGameInternalEventGenerator DialogueGameInternalEventGenerator]]
 * and
 * [[fr.dubuissonduplessis.dogma.conversationalGameBoard.commitmentStore.internalEvent.impl.DeactivatedInternalEventGenerator DeactivatedInternalEventGenerator]]
 * @author Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr>
 *
 */
trait InternalEventGenerator {
  /**
   * Computes the set of events that has been generated by the previous event.
   * @note After consumption, this set should be reset via
   * [[fr.dubuissonduplessis.dogma.conversationalGameBoard.commitmentStore.internalEvent.InternalEventGenerator#popEvents popEvents method]].
   * @param lastSpeaker an option consisting in the dialogue participant that produced
   * the last external event, if he exists
   * @return the set of events that has been generated by the previous event.
   */
  private[conversationalGameBoard] def internalEvents(lastSpeaker: Option[Interlocutor]): Set[InternalEvent]

  /**
   * Determines the set of events that has already been generated.
   * @return the set of events that has already been generated
   */
  private[conversationalGameBoard] def pastEvents: Set[InternalEvent]

  /**
   * Resets the set of generated events to an empty set.
   *
   */
  private[conversationalGameBoard] def popEvents(): Unit
}
